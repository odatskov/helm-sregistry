# Default values for sregistry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

##########################
## Dependencies
## Singularity registry requires external services: postgres, minio and redis
##

postgresql:

  ## Create a local database service instance
  ## Refence: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
  ##
  enabled: true

  ## [Required] Arguments needed to establish a db connection
  hostname: "sregistry-postgresql"
  auth:
    postgresPassword: "postgres"
    username: "sregistry"
    password: "sregistry123"
  service:
    port: 5432

  ## [Optional] Subchart overrides. Refer to chart description for available options.
  persistence:
    enabled: false

redis:

  ## Create a local key-value cache and store instance
  ## Reference: https://github.com/bitnami/charts/tree/master/bitnami/redis
  ##
  enabled: true

  ## [Required] Endpoint for a key-value store
  hostname: "sregistry-redis-master"
  redisPort: 6379

  ## [Optional] Subchart overrides. Refer to chart description for available options
  usePassword: false
  master:
    persistence:
      enabled: false
  replica:
    persistence:
      enabled: false

minio:

  ## Create a local minio instance
  ## Reference: https://github.com/bitnami/charts/tree/master/bitnami/minio
  ##
  enabled: true

  ## [Required] Service endpoint hostname and port
  hostname: "sregistry-minio"
  service:
    port: 9000

  ## [Required] Access credentials
  auth:
    rootPassword: "newminio123"
    rootUser: "newminio"

  ssl: "False"
  bucket: "sregistry"
  region: "us-east-1"

  ## [Optional] Subchart overrides. Refer to chart description for available options
  serviceAccount:
    create: false
  persistence:
    enabled: false
  disableWebUI: true
  extraEnv:
  - name: MINIO_ACCESS_KEY_OLD
    value: minio
  - name: MINIO_SECRET_KEY_OLD
    value: minio123


###########################
## Registry Configuration
##
config:

  domainName:   "127.0.0.1"
  registryName: "Tacosaurus Computing Center"
  registryUri:  "taco"

  instituteSite: "https://srcc.stanford.edu"
  contactEmail:  "vsochat@stanford.edu"

  # Google analytics option. Disabled by default.
  analytics: "None"

  # List administrator accounts/users
  admins:
  - user:  "vsochat"
    email: "vsochat@gmail.com"

  # Allow users to create public collections
  userCreate: "True"

  # Limit users to N collections (None for unlimited)
  userCollections: 2

  # Define visibility of images. Default "False" sets to public
  private: "False"

  # Allows to Set images to private by default
  privateDefault: "False"

  # Number of collections to show per page
  collectionsPerPage: 250

  # Maximum number of downloads per container and collection, per week
  weeklyContainers: 100
  weeklyCollections: 100

  # Rate limits for each view and block policy
  viewRateLimit: "50/1d"
  viewRateBlock: "True"

  # Disable all building, including pushing of containers and recipes
  disableBuild: "False"

  # Track all requests to pull containers. Set to "False" for minimal logging
  logSaveResponses: "True"


##########################
## SRegistry Images
##
images:

  # Container pullPolicy to maintain
  pullPolicy: IfNotPresent

  # SRegistry image and port exposed by the uwsgi port
  sregistry:
    image: "quay.io/vanessa/sregistry"
    tag: ""
    port: 3031

  # Web server for a Singularity Hub instance
  nginx:

    # Enable ingress for config.domainName host
    ingress: true
    ingressClass: "nginx"

    ## Service type specifies web server visibility.
    ## For example:  "ClusterIP" will only be visible within the cluster.
    ## "LoadBalancer" type gives IP management to configured LBs.
    ##
    type: ClusterIP

    ## Annotations for the nginx Service. May be needed for LoadBalancer type.
    annotations: ""

    ## For ingress, set the nginx proxy-body-size limit
    maxBodySize: "10024M"
    bodyBufferSize: "10024M"
    bodyTimeout: 120

    # Specify secret name to enable TLS on Ingress (must be enabled)
    tlsSecretName: ""

    # Nginx image and port exposed by the service
    image: "quay.io/vanessa/sregistry_nginx"
    tag: ""
    port: 80

##########################
## Registry statefulSet parameters
##
statefulset:

  ## Update strategy, can be set to RollingUpdate or OnDelete by default.
  ## Ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets
  ##
  updateStrategy: RollingUpdate

  ## Statefulset controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees.
  ## There are two valid pod management policies: OrderedReady and Parallel
  ## Ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
  podManagementPolicy: Parallel

  # Number of replicas
  replicaCount: 1

##########################
## Registry container liveness and readiness probes
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5

##########################
## Persistence
## Enable to persist data into storage, otherwise use local scratch space (emptyDir)
##
persistence:
  ## If true, use a Persistent Volume Claim, If false, use emptyDir
  ##
  enabled: false

  ## Persistent volume storage class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is set,
  ##   choosing the default provisioner. (gp2 on AWS, standard on GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

  # Persistent volume access mode
  accessMode: ReadWriteOnce

  # Persistent volume size
  size: 1Gi

##########################
## Authentication Plugins
## Setup docs: https://singularityhub.github.io/sregistry/docs/install/settings
##
auth:

  # List of plugins available in the container
  plugins: [ "google", "twitter", "github", "gitlab", "bitbucket", "github_enterprise" ]

  ## For custom plugins define list of ConfigMaps to mount into sregistry
  ## For writing a plugin refer to docs: https://singularityhub.github.io/sregistry/docs/plugins/
  ## Example:
  ## - name: "custom-plugin"
  ##   configMap: "plugin-cm"
  ##
  customPlugins: []

  ## For each enabled plugin specify the name and credentials.
  ## Extra definitions can be added as needed. Refer to the docs for reference.
  ## Example:
  ## - name:   "google"
  ##   key:    "xxxxxx"
  ##   secret: "xxxxxx"
  ##   extra:
  ##   - name:  "GOOGLE_CLIENT_FILE"
  ##     value: "'/code/.grilledcheese.json'"
  ##   - name:  "SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS"
  ##     value: "{ 'access_type' : 'offline', 'approval_prompt' : 'auto' }"
  ##
  enabled:
  - name: "github"
    key: ""
    secret: ""
    extra: []

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
podSecurityContext: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Node labels for assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
##
tolerations: []

## Registry containers' resource requests and limits
## Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
##
resources:
  limits: {}
  #  cpu: 250m
  #  memory: 256Mi
  requests: {}
  #  cpu: 250m
  #  memory: 256Mi

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
