apiVersion: v1
kind: ConfigMap
metadata:
  name: shub-config
  labels:
  {{- include "sregistry.labels" . | nindent 4 }}
data:
  secrets.py: |-
    SECRET_KEY = {{ randAlphaNum 50 | quote }}
    {{- range .Values.auth.enabled }}
    SOCIAL_AUTH_{{ upper .name }}{{ include "oauth.prefix" .name }}_KEY = {{ .key | quote }}
    SOCIAL_AUTH_{{ upper .name }}{{ include "oauth.prefix" .name }}_SECRET = {{ .secret | quote }}
    {{- range .extra }}
    {{ .name }} = {{ .value | quote }}
    {{- end }}
    {{- end }}

  config.py: |-
    """

    Copyright (C) 2017-2020 Vanessa Sochat.

    This Source Code Form is subject to the terms of the
    Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed
    with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

    """

    # AUTHENTICATION

    # Which social auths do you want to use?

    {{- range .Values.auth.enabled }}
    ENABLE_{{ upper .name }}_AUTH=True
    {{- end }}

    {{- $disabled := .Values.auth.plugins }}
    {{- range .Values.auth.enabled }}
    {{ if has .name $disabled }}{{ $disabled = without $disabled .name }}{{- end }}
    {{- end }}

    {{- range $disabled }}
    ENABLE_{{ upper . }}_AUTH=False
    {{- end }}

    # NOTE you will need to set autehtication methods up.
    # Configuration goes into secrets.py
    # see https://singularityhub.github.io/sregistry/install.html
    # secrets.py.example provides a template to work from

    # See below for additional authentication module, e.g. LDAP that are
    # available, and configured, as plugins.

    # DOMAIN NAMES
    ## IMPORTANT: if/when you switch to https, you need to change "DOMAIN_NAME"
    # to have https, otherwise some functionality will not work (e.g., GitHub webhooks)

    DOMAIN_NAME = "{{ include "http.prefix" . }}://{{ .Values.config.domainName }}"
    DOMAIN_NAME_HTTP = "{{ include "http.prefix" . }}://{{ .Values.config.domainName }}"
    DOMAIN_NAKED = DOMAIN_NAME_HTTP.replace("{{ include "http.prefix" . }}://", "")

    ADMINS = ( {{- range .Values.config.admins }}({{ .user | quote }}, {{ .email | quote }}),{{- end }})
    MANAGERS = ADMINS

    HELP_CONTACT_EMAIL = {{ .Values.config.contactEmail | quote }}
    HELP_INSTITUTION_SITE = {{ .Values.config.instituteSite | quote }}
    REGISTRY_NAME = {{ .Values.config.registryName | quote }}
    REGISTRY_URI =  {{ .Values.config.registryUri  | quote }}
    GOOGLE_ANALYTICS = {{ .Values.config.analytics | quote }} # "UA-XXXXXXXXX"

    # Permissions and Views

    # Set this to be some size in MB to limit uploads.
    # Uploads > 2.5GB will not use memory, but the filesystem
    DATA_UPLOAD_MAX_MEMORY_SIZE = None

    # Allow users to create public collections
    USER_COLLECTIONS = {{ .Values.config.userCreate }}

    # Limit users to N collections (None is unlimited)
    USER_COLLECTION_LIMIT = {{ .Values.config.userCollections }}

    # Should registries by default be private, with no option for public?
    PRIVATE_ONLY = {{ .Values.config.private }}

    # Should the default for a new registry be private or public?
    DEFAULT_PRIVATE = {{ .Values.config.privateDefault }}

    # The number of collections to show on the /<domain>/collections page
    COLLECTIONS_VIEW_PAGE_COUNT = {{ .Values.config.collectionsPerPage }}

    # The maximum number of downloads allowed per container/collection, per week
    CONTAINER_WEEKLY_GET_LIMIT = {{ .Values.config.weeklyContainers }}
    COLLECTION_WEEKLY_GET_LIMIT = {{ .Values.config.weeklyCollections }}

    # Disable all pushes of containers, recipes, etc. Also for Google Cloud Build
    DISABLE_BUILDING = {{ .Values.config.disableBuild }}

    # Plugins ######################################################################
    # See dummy_secrets.py for more details.

    SREGISTRY_GOOGLE_BUILD_LIMIT = 100
    SREGISTRY_GOOGLE_BUILD_SINGULARITY_VERSION = "v3.3.0-slim"
    SREGISTRY_GOOGLE_BUILD_TIMEOUT_SECONDS = None  # None defaults to 10 minutes
    SREGISTRY_GOOGLE_BUILD_EXPIRE_SECONDS = 28800
    CONTAINER_SIGNED_URL_EXPIRE_SECONDS = 10

    # A global setting to disable all webhooks / interaction with Github
    DISABLE_GITHUB = False

    # prevent responses from being received from Google Cloud Build
    DISABLE_BUILD_RECEIVE = False

    # DATABASE

    # https://docs.djangoproject.com/en/1.9/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "postgres",
            "USER": {{ .Values.postgresql.auth.username | quote }},
            "PASSWORD": {{ .Values.postgresql.auth.password | quote }},
            "HOST": {{ .Values.postgresql.hostname | quote }},
            "PORT": {{ .Values.postgresql.service.port | quote }},
        }
    }

    # STORAGE

    MINIO_SERVER = "{{ .Values.minio.hostname }}:{{ .Values.minio.service.port }}"  # Internal to sregistry
    MINIO_EXTERNAL_SERVER = (
        "{{ .Values.minio.hostname }}:{{ .Values.minio.service.port }}"  # minio server for Singularity to interact with
    )
    MINIO_BUCKET = {{ .Values.minio.bucket | quote }}
    MINIO_SSL = {{ .Values.minio.ssl }}  # use SSL for minio
    MINIO_SIGNED_URL_EXPIRE_MINUTES = 5
    MINIO_REGION = {{ .Values.minio.region | quote }}
    MINIO_MULTIPART_UPLOAD = True
    MINIO_ROOT_USER = {{ .Values.minio.auth.rootUser | quote }}
    MINIO_ROOT_PASSWORD = {{ .Values.minio.auth.rootPassword | quote }}
    DISABLE_MINIO_CLEANUP = False

    # Logging

    # Do you want to save complete response metadata per each pull?
    # If you disable, we still keep track of collection pull counts, but not specific versions
    LOGGING_SAVE_RESPONSES = {{ .Values.config.logSaveResponses }}

    # Rate Limits

    VIEW_RATE_LIMIT = {{ .Values.config.viewRateLimit | quote }}  # The rate limit for each view, django-ratelimit, "50 per day per ipaddress)
    VIEW_RATE_LIMIT_BLOCK = (
        {{ .Values.config.viewRateBlock }}  # Given that someone goes over, are they blocked for the period?
    )

    # Plugins
    # Add the name of a plugin under shub.plugins here to enable it

    # Available Plugins:

    # - ldap_auth: Allows sregistry to authenticate against an LDAP directory
    # - google_build: a custom storage with that uses Google Cloud Build + Storage
    # - pam_auth: Allow users from (docker) host to log in
    # - globus: allows connection from sregistry to endpoints
    # - saml_auth: authentication with SAML
    # - pgp: deploy a key server alongside your registry

    PLUGINS_ENABLED = [
        {{ range .Values.auth.customPlugins }}
             {{ .name | squote }}
        {{ end }}
        #    'pgp'
        #    'ldap_auth',
        #    'google_build'
        #    'pam_auth',
        #    'globus',
        #    'saml_auth'
    ]

  uwsgi_params.par: |-
    uwsgi_param  QUERY_STRING       $query_string;
    uwsgi_param  REQUEST_METHOD     $request_method;
    uwsgi_param  CONTENT_TYPE       $content_type;
    uwsgi_param  CONTENT_LENGTH     $content_length;

    uwsgi_param  REQUEST_URI        $request_uri;
    uwsgi_param  PATH_INFO          $document_uri;
    uwsgi_param  DOCUMENT_ROOT      $document_root;
    uwsgi_param  SERVER_PROTOCOL    $server_protocol;
    uwsgi_param  HTTPS              $https if_not_empty;

    uwsgi_param  REMOTE_ADDR        $remote_addr;
    uwsgi_param  REMOTE_PORT        $remote_port;
    uwsgi_param  SERVER_PORT        $server_port;
    uwsgi_param  SERVER_NAME        $server_name;
